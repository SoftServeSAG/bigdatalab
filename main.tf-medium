provider "aws" {
  access_key = "${var.access_key}"
  secret_key = "${var.secret_key}"
  region = "${var.region}"
}

resource "aws_security_group" "security_group" {
  name = "${var.security_group}"

  # ssh
  ingress {
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # elasticsearch
  ingress {
    from_port = 9200
    to_port = 9200
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # kibana
  ingress {
    from_port = 5601
    to_port = 5601
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # cloudera manager
  ingress {
    from_port = 7180
    to_port = 7180
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # hue
  ingress {
    from_port = 8888
    to_port = 8888
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    self = true
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_key_pair" "key" {
  key_name = "${var.key_name}" 
  public_key = "${var.public_key}"
}

resource "null_resource" "null_pre_deployment" {
  provisioner "local-exec" {
    command = <<EOF
cd puppet
bundle exec rake prep
bundle exec rake rspec:classes
cd ..
EOF
  }
}

# T.B.D. Use default var.os_version instead of centos-7.0
resource "aws_instance" "node_log_generator" {
  depends_on = ["null_resource.null_pre_deployment"]

  ami = "${lookup(var.amis, lookup(var.os_versions, "log_generator"))}"
  instance_type = "${lookup(var.instance_types, "log_generator")}"
  security_groups = ["${var.security_group}"]
  key_name = "${var.key_name}"

  tags = {
    Name = "log_generator"
    App = "${var.tag_app}"
    Env = "${var.tag_env}"
    Owner = "${var.tag_owner}"
  }

  connection {
    type = "ssh"
    user = "${lookup(var.users, lookup(var.amis, lookup(var.os_versions, "log_generator")))}"
    key_file = "${var.key_file}"
  }

  provisioner "file" {
    source = "puppet"
    destination = "${var.puppet_path}"
  }

  provisioner "remote-exec" {
    inline = [
      "export PUPPET_ROLE=log_generator",
      "sudo chmod +x ${var.puppet_path}/puppet/puppet.sh",
      "${var.puppet_path}/puppet/puppet.sh"
    ]
  }

  count = 1
}

resource "aws_instance" "node_flume" {
  depends_on = ["null_resource.null_pre_deployment"]

  ami = "${lookup(var.amis, lookup(var.os_versions, "default"))}"
  instance_type = "${lookup(var.instance_types, "flume")}"
  security_groups = ["${var.security_group}"]
  key_name = "${var.key_name}"

  tags = {
    Name = "flume"
    App = "${var.tag_app}"
    Env = "${var.tag_env}"
    Owner = "${var.tag_owner}"
  }

  connection {
    type = "ssh"
    user = "${lookup(var.users, lookup(var.amis, lookup(var.os_versions, "default")))}"
    key_file = "${var.key_file}"
  }

  provisioner "file" {
    source = "puppet"
    destination = "${var.puppet_path}"
  }

  # T.B.D. PoC, remove
  provisioner "remote-exec" {
    inline = [
      "touch /tmp/elasticsearch_nodes",
      "printf '${join("\n", aws_instance.node_elasticsearch.*.public_ip)}\n' >> /tmp/elasticsearch_nodes"
    ]
  }

  provisioner "remote-exec" {
    inline = [
      "export PUPPET_ROLE=flume",
      "sudo chmod +x ${var.puppet_path}/puppet/puppet.sh",
      "${var.puppet_path}/puppet/puppet.sh"
    ]
  }

  count = 1
}

resource "null_resource" "null_dynamic_config" {
  provisioner "local-exec" {
    command = <<EOF
FILE_PATH=puppet/hiera/hieradata/dynamic.yaml
rm -rf $FILE_PATH
touch $FILE_PATH
printf 'profiles::common::aws_access_key: '\''${var.access_key}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_secret_key: '\''${var.secret_key}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_region: '\''${var.region}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_security_group: '\''${var.security_group}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_ssh_username: '\''${lookup(var.users, lookup(var.amis, lookup(var.os_versions, "default")))}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_ami: '\''${lookup(var.amis, lookup(var.os_versions, "default"))}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_security_group_id: '\''${aws_security_group.security_group.id}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_subnetId: '\''${var.vpc_subnet_id}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_tag_env: '\''${var.tag_env}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_tag_owner: '\''${var.tag_owner}'\''\n' >> $FILE_PATH
printf 'profiles::cloudera_director_client::private_key_path: '\''/home/ec2-user/.ssh/${var.key_name}'\''\n' >> $FILE_PATH
EOF
  }
}

resource "aws_instance" "node_elasticsearch" {
  depends_on = ["null_resource.null_pre_deployment", "null_resource.null_dynamic_config"]

  ami = "${lookup(var.amis, lookup(var.os_versions, "default"))}"
  instance_type = "${lookup(var.instance_types, "elasticsearch_kibana")}"
  security_groups = ["${var.security_group}"]
  key_name = "${var.key_name}"

  tags = {
    Name = "elasticsearch"
    App = "${var.tag_app}"
    Env = "${var.tag_env}"
    Owner = "${var.tag_owner}"
  }

  connection {
    type = "ssh"
    user = "${lookup(var.users, lookup(var.amis, lookup(var.os_versions, "default")))}"
    key_file = "${var.key_file}"
  }

  provisioner "file" {
    source = "puppet"
    destination = "${var.puppet_path}"
  }

  provisioner "remote-exec" {
    inline = [
      "export PUPPET_ROLE=elasticsearch_kibana",
      "sudo chmod +x ${var.puppet_path}/puppet/puppet.sh",
      "${var.puppet_path}/puppet/puppet.sh"
    ]
  }

  count = 1
}

resource "aws_instance" "cloudera_director_client" {
  depends_on = ["null_resource.null_pre_deployment", "null_resource.null_dynamic_config"]

  ami = "${lookup(var.amis, lookup(var.os_versions, "default"))}"
  instance_type = "${lookup(var.instance_types, "cloudera_director_client")}"
  security_groups = ["${var.security_group}"]
  key_name = "${var.key_name}"

  tags = {
    Name = "cloudera_director_client"
    App = "${var.tag_app}"
    Env = "${var.tag_env}"
    Owner = "${var.tag_owner}"
  }

  connection {
    type = "ssh"
    user = "${lookup(var.users, lookup(var.amis, lookup(var.os_versions, "default")))}"
    key_file = "${var.key_file}"
  }

  provisioner "file" {
    source = "puppet"
    destination = "${var.puppet_path}"
  }

  # Copy private key to be used by Cloudera Director to deploy cluster
  provisioner "file" {
    source = "${var.key_file}"
    destination = "~/.ssh/${var.key_name}"
  }

  provisioner "remote-exec" {
    inline = [
      "export PUPPET_ROLE=cloudera_director_client",
      "sudo chmod +x ${var.puppet_path}/puppet/puppet.sh",
      "${var.puppet_path}/puppet/puppet.sh"
    ]
  }

  count = 1
}


resource "null_resource" "null_post_deployment" {
  depends_on = ["aws_instance.node_log_generator",
                "aws_instance.node_flume",
                "aws_instance.node_elasticsearch",
                "aws_instance.cloudera_director_client"]

  provisioner "local-exec" {
    command = <<EOF
rm -rf puppet/hiera/hieradata/dynamic.yaml
cd puppet
bundle exec rake clean
cd ..
EOF
  }
}

output "public_ip_node_log_generator" {
  value = "${join(",", aws_instance.node_log_generator.*.public_ip)}"
}

output "public_ip_node_flume" {
  value = "${join(",", aws_instance.node_flume.*.public_ip)}"
}

output "public_ip_node_elasticsearch" {
  value = "${join(",", aws_instance.node_elasticsearch.*.public_ip)}"
}

output "public_ip_node_cloudera_director" {
  value = "${join(",", aws_instance.cloudera_director_client.*.public_ip)}"
}

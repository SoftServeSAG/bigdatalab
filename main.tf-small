provider "aws" {
  access_key = "${var.access_key}"
  secret_key = "${var.secret_key}"
  region = "${var.region}"
}

resource "aws_security_group" "security_group" {
  name = "${var.security_group}"

  # T.B.D. Close unneeded ports
  ingress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_key_pair" "key" {
  key_name = "${var.key_name}" 
  public_key = "${var.public_key}"
}

resource "null_resource" "null_pre_deployment" {
  provisioner "local-exec" {
    command = <<EOF
cd puppet
bundle exec rake prep
bundle exec rake rspec:classes
cd ..
EOF
  }
}

# T.B.D. Use default var.os_version instead of centos-7.0
resource "aws_instance" "node_log_generator" {
  depends_on = ["null_resource.null_pre_deployment"]

  ami = "${lookup(var.amis, "centos-7.0")}"
  instance_type = "${var.instance_type}"
  security_groups = ["${var.security_group}"]
  key_name = "${var.key_name}"

  tags = {
    Name = "log_generator"
    App = "${var.tag_app}"
    Env = "${var.tag_env}"
    Owner = "${var.tag_owner}"
  }

  connection {
    type = "ssh"
    user = "${lookup(var.users, lookup(var.amis, "centos-7.0"))}"
    key_file = "${var.key_file}"
  }

  provisioner "file" {
    source = "puppet"
    destination = "${var.puppet_path}"
  }

  # T.B.D. PoC, remove
  provisioner "remote-exec" {
    inline = [
      "touch /tmp/elasticsearch_nodes",
      "printf '${join("\n", aws_instance.node_elasticsearch.*.public_ip)}\n' >> /tmp/elasticsearch_nodes"
    ]
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum -y install yum-plugin-fastestmirror",
      "sudo yum -y update",
      "sudo yum -y remove java-*-openjdk",
      "sudo rpm -U https://yum.puppetlabs.com/puppetlabs-release-pc1-el-6.noarch.rpm",
      "sudo yum -y install puppet-agent",
      "sudo ln -sf /opt/puppetlabs/puppet/bin/puppet /usr/bin/puppet",
      "cd ${var.puppet_path}/puppet",
      "sudo puppet apply --modulepath modules --hiera_config=hiera/hiera.yaml --yamldir hiera manifests/log_generator_flume.pp"
    ]
  }

  count = 1
}

resource "null_resource" "null_common_aws_config" {
  depends_on = ["aws_security_group.security_group"]
  provisioner "local-exec" {
    command = <<EOF
FILE_PATH=puppet/hiera/hieradata/aws.yaml
rm -rf $FILE_PATH
touch $FILE_PATH
printf 'profiles::common::aws_access_key: '\''${var.access_key}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_secret_key: '\''${var.secret_key}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_region: '\''${var.region}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_security_group: '\''${var.security_group}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_ssh_username: '\''${lookup(var.users, lookup(var.amis, var.os_version))}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_ami: '\''${lookup(var.amis, var.os_version)}'\''\n' >> $FILE_PATH
printf 'profiles::common::aws_security_group_id: '\''${aws_security_group.security_group.id}'\''\n' >> $FILE_PATH
EOF
  }
}

resource "aws_instance" "node_elasticsearch" {
  depends_on = ["null_resource.null_pre_deployment", "null_resource.null_common_aws_config"]

  ami = "${lookup(var.amis, var.os_version)}"
  instance_type = "${var.instance_type}"
  security_groups = ["${var.security_group}"]
  key_name = "${var.key_name}"

  tags = {
    Name = "elasticsearch"
    App = "${var.tag_app}"
    Env = "${var.tag_env}"
    Owner = "${var.tag_owner}"
  }

  connection {
    type = "ssh"
    user = "${lookup(var.users, lookup(var.amis, var.os_version))}"
    key_file = "${var.key_file}"
  }

  provisioner "file" {
    source = "puppet"
    destination = "${var.puppet_path}"
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum -y install yum-plugin-fastestmirror",
      "sudo yum -y update",
      "sudo yum -y remove java-*-openjdk",
      "sudo rpm -U https://yum.puppetlabs.com/puppetlabs-release-pc1-el-6.noarch.rpm",
      "sudo yum -y install puppet-agent",
      "sudo ln -sf /opt/puppetlabs/puppet/bin/puppet /usr/bin/puppet",
      "cd ${var.puppet_path}/puppet",
      "sudo puppet apply --modulepath modules --hiera_config=hiera/hiera.yaml --yamldir hiera manifests/elasticsearch_kibana.pp"
    ]
  }

  count = 1
}

# Deploy instance for Cloudera Director client
resource "aws_instance" "cloudera_director_client" {

  depends_on = ["null_resource.null_pre_deployment", "null_resource.null_common_aws_config"]

  ami = "${lookup(var.amis, var.os_version)}"
  instance_type = "${var.cloudera_director_instance_type}"
  security_groups = ["${var.security_group}"]
  key_name = "${var.key_name}"

  tags = {
    Name = "cloudera_director_client"
    App = "${var.tag_app}"
    Env = "${var.tag_env}"
    Owner = "${var.tag_owner}"
  }

  connection {
    type = "ssh"
    user = "${lookup(var.users, lookup(var.amis, var.os_version))}"
    key_file = "${var.key_file}"
  }

  provisioner "file" {
    source = "puppet"
    destination = "${var.puppet_path}"
  }

  # Copy private key to be used by Cloudera Director to deploy cluster
  provisioner "file" {
    source = "${var.key_file}"
    destination = "~/.ssh/${var.key_name}"
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum -y install yum-plugin-fastestmirror",
      "sudo yum -y update",
      "sudo yum -y remove java-*-openjdk",
      "sudo rpm -U https://yum.puppetlabs.com/puppetlabs-release-pc1-el-6.noarch.rpm",
      "sudo yum -y install puppet-agent",
      "sudo ln -sf /opt/puppetlabs/puppet/bin/puppet /usr/bin/puppet",
      "cd ${var.puppet_path}/puppet",
      "sudo puppet apply --modulepath modules --hiera_config=hiera/hiera.yaml --yamldir hiera manifests/cloudera_director.pp"
    ]
  }

  count = 1
}

resource "null_resource" "null_post_deployment" {
  depends_on = ["aws_instance.node_log_generator",
                "aws_instance.node_elasticsearch",
                "aws_instance.cloudera_director_client"]

  provisioner "local-exec" {
    command = <<EOF
rm -rf puppet/hiera/hieradata/aws.yaml
cd puppet
bundle exec rake clean
cd ..
EOF
  }
}

output "public_ip_node_log_generator" {
  value = "${join(",", aws_instance.node_log_generator.*.public_ip)}"
}

output "public_ip_node_elasticsearch" {
  value = "${join(",", aws_instance.node_elasticsearch.*.public_ip)}"
}

output "public_ip_node_cloudera_director" {
  value = "${join(",", aws_instance.cloudera_director_client.*.public_ip)}"
}
